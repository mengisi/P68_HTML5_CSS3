git branch -f master（或者HEAD，或者其他分支名） ~3
此命令可向上移动分支3次。

git branch -f master（或者HEAD，或者其他分支名） hash
此命令可移动分支到hash的位置。

git reset HEAD~1
撤销一次动作（本地）

git revert 分支名
 撤销



dfsdfdfd
dfd
dfadfdf
sdfadfadf
dfadfa

--------------------------------------------------

git config --global user.name "XXX"
git config --global user.email "XXX"
上述中，--global表示全局，可省略。

git config --list
 查看设置结果
或者：
全局的通过vim ~/.gitconfig来查看
局部的通过当前路径下的 .git/config文件来查看

git add .
加入该处所有文件（注意 小点前有空格）

git add 文件名

git commit -m 文件名

合成一步： git commit -a -m "注释"

git reset --hard HEAD~1
本地回退一步

git reset --hard (hash值 或其前段代码)
本地前进

git log --pretty=oneline

git reflog

git checkout file
git reset HEAD file

建立分支：git branch Meng

查看分支情况： git branch

切换分支：git checkout Meng

 建立并切换到新分支： 先到主分支（git checkout master） git checkout -b Meng
 删除分支：git branch -d Meng


连接到远程github： git remote set-url origin https://......

推送到远程：git push origin master 或 git push origin 本地分支名：远程分支名(二者最好 相同)

合并：先要在主分支上，然后git merge --no-ff -m "..." Meng

删除远程的分支：git push origin --delete Meng
删除远程分支方法2： 先在本地删除Meng分支， 然后git push origin :远程的分支名

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。




使用stash的场合：当前工作区内容已被修改，但是并未完成。这时Boss来了，说前面的分支上面有一个Bug，需要立即修复。可是我又不想提交目前的修改，因为提交的话，代码才完成一半或者不完善，导致log上有大量不必要的记录。但是，不提交的话，又没有办法checkout到前面的分支。


