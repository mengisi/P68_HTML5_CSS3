git branch -f master（或者HEAD，或者其他分支名） ~3
此命令可向上移动分支3次。

git branch -f master（或者HEAD，或者其他分支名） hash
此命令可移动分支到hash的位置。

撤销: git revert 分支名
--------------------------------------------------
git config --global user.name "XXX"
git config --global user.email "XXX"
上述中，--global表示全局，可省略。

 查看设置结果: git config --list
或者：全局的通过vim ~/.gitconfig来查看, 局部的通过当前路径下的 .git/config文件来查看

git log --pretty=oneline

git reflog


回退一步: git reset --hard HEAD~1
前进: git reset --hard hash值(或其前段代码)

撤销修改(add后未修改): git checkout file
撤销修改(add后修改但未commit): git reset HEAD file
撤销修改(已经commit): git reset hash值 filename  (或HEAD~ ?)

查看分支情况： git branch

切换分支：git checkout Meng

建立分支：git branch Meng
建立并切换到新分支： 先到主分支（git checkout master） git checkout -b Meng
 删除分支：git branch -d Meng

推送到远程：git push origin 本地分支名：远程分支名(二者如相同，可写: git push origin 分支名)

合并：先要在主分支上，然后git merge --no-ff -m "..." Meng

删除远程的分支：git push origin --delete Meng
删除远程分支方法2： 先在本地删除Meng分支， 然后git push origin :远程的分支名

使用stash的场合：当前工作区内容已被修改，但是并未完成。这时Boss来了，说前面的分支上面有一个Bug，需要立即修复。可是我又不想提交目前的修改，因为提交的话，代码才完成一半或者不完善，导致log上有大量不必要的记录。但是，不提交的话，又没有办法checkout到前面的分支。


如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。（或者以下第一次推送的办法？）

添加远程仓库: git remote add origin url，然后进行第一次推送(用-u): git push -u origin master
添加第二个远程仓库: git remote set-url --add origin <url2> 
修改远程仓库地址：   git remote set-url [--push] <name> <newurl> [<oldurl>]   此处方括号中的内容为可选项

在本地克隆远程仓库: git clone url